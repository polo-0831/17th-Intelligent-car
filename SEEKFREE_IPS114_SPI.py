from machine import SPI,Pin
import time, sensor, image

# IO接线方法
# 屏         openart
# GND       ---> GND
# VCC       ---> 3.3V
# SCL       ---> B0(SCLK)
# SDA/MISO  ---> B1(MISO)
# RESET     ---> B12
# DC        ---> B13
# CS        ---> B3
# BL        ---> B16 (背光控制)

asc ={
       "0":[0x00,0x00,0x00,0x18,0x24,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x24,0x18,0x00,0x00],
       "1":[0x00,0x00,0x00,0x10,0x1C,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x7C,0x00,0x00],
       "2":[0x00,0x00,0x00,0x3C,0x42,0x42,0x42,0x40,0x20,0x10,0x08,0x04,0x42,0x7E,0x00,0x00],
       "3":[0x00,0x00,0x00,0x3C,0x42,0x42,0x40,0x20,0x18,0x20,0x40,0x42,0x42,0x3C,0x00,0x00],
       "4":[0x00,0x00,0x00,0x20,0x30,0x30,0x28,0x24,0x24,0x22,0xFE,0x20,0x20,0xF8,0x00,0x00],
       "5":[0x00,0x00,0x00,0x7E,0x02,0x02,0x02,0x1E,0x22,0x40,0x40,0x42,0x22,0x1C,0x00,0x00],
       "6":[0x00,0x00,0x00,0x18,0x24,0x02,0x02,0x3A,0x46,0x42,0x42,0x42,0x44,0x38,0x00,0x00],
       "7":[0x00,0x00,0x00,0x7E,0x42,0x20,0x20,0x10,0x10,0x08,0x08,0x08,0x08,0x08,0x00,0x00],
       "8":[0x00,0x00,0x00,0x3C,0x42,0x42,0x42,0x24,0x18,0x24,0x42,0x42,0x42,0x3C,0x00,0x00],
       "9":[0x00,0x00,0x00,0x1C,0x22,0x42,0x42,0x42,0x62,0x5C,0x40,0x40,0x24,0x18,0x00,0x00],
       "A":[0x00,0x00,0x00,0x08,0x08,0x18,0x14,0x14,0x24,0x3C,0x22,0x42,0x42,0xE7,0x00,0x00],
       "B":[0x00,0x00,0x00,0x1F,0x22,0x22,0x22,0x1E,0x22,0x42,0x42,0x42,0x22,0x1F,0x00,0x00],
       "C":[0x00,0x00,0x00,0x7C,0x42,0x42,0x01,0x01,0x01,0x01,0x01,0x42,0x22,0x1C,0x00,0x00],
       "D":[0x00,0x00,0x00,0x1F,0x22,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x22,0x1F,0x00,0x00],
       "E":[0x00,0x00,0x00,0x3F,0x42,0x12,0x12,0x1E,0x12,0x12,0x02,0x42,0x42,0x3F,0x00,0x00],
       "F":[0x00,0x00,0x00,0x3F,0x42,0x12,0x12,0x1E,0x12,0x12,0x02,0x02,0x02,0x07,0x00,0x00],
       "G":[0x00,0x00,0x00,0x3C,0x22,0x22,0x01,0x01,0x01,0x71,0x21,0x22,0x22,0x1C,0x00,0x00],
       "H":[0x00,0x00,0x00,0xE7,0x42,0x42,0x42,0x42,0x7E,0x42,0x42,0x42,0x42,0xE7,0x00,0x00],
       "I":[0x00,0x00,0x00,0x3E,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x3E,0x00,0x00],
       "J":[0x00,0x00,0x00,0x7C,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x11,0x0F],
       "K":[0x00,0x00,0x00,0x77,0x22,0x12,0x0A,0x0E,0x0A,0x12,0x12,0x22,0x22,0x77,0x00,0x00],
       "L":[0x00,0x00,0x00,0x07,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x42,0x7F,0x00,0x00],
       "M":[0x00,0x00,0x00,0x77,0x36,0x36,0x36,0x36,0x36,0x2A,0x2A,0x2A,0x2A,0x6B,0x00,0x00],
       "N":[0x00,0x00,0x00,0xE3,0x46,0x46,0x4A,0x4A,0x52,0x52,0x52,0x62,0x62,0x47,0x00,0x00],
       "O":[0x00,0x00,0x00,0x1C,0x22,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x22,0x1C,0x00,0x00],
       "P":[0x00,0x00,0x00,0x3F,0x42,0x42,0x42,0x42,0x3E,0x02,0x02,0x02,0x02,0x07,0x00,0x00],
       "Q":[0x00,0x00,0x00,0x1C,0x22,0x41,0x41,0x41,0x41,0x41,0x41,0x4D,0x32,0x1C,0x60,0x00],
       "R":[0x00,0x00,0x00,0x3F,0x42,0x42,0x42,0x3E,0x12,0x12,0x22,0x22,0x42,0xC7,0x00,0x00],
       "S":[0x00,0x00,0x00,0x7C,0x42,0x42,0x02,0x04,0x18,0x20,0x40,0x42,0x42,0x3E,0x00,0x00],
       "T":[0x00,0x00,0x00,0x7F,0x49,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x1C,0x00,0x00],
       "U":[0x00,0x00,0x00,0xE7,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x3C,0x00,0x00],
       "V":[0x00,0x00,0x00,0xE7,0x42,0x42,0x22,0x24,0x24,0x14,0x14,0x18,0x08,0x08,0x00,0x00],
       "W":[0x00,0x00,0x00,0x6B,0x2A,0x2A,0x2A,0x2A,0x2A,0x36,0x14,0x14,0x14,0x14,0x00,0x00],
       "X":[0x00,0x00,0x00,0xE7,0x42,0x24,0x24,0x18,0x18,0x18,0x24,0x24,0x42,0xE7,0x00,0x00],
       "Y":[0x00,0x00,0x00,0x77,0x22,0x22,0x14,0x14,0x08,0x08,0x08,0x08,0x08,0x1C,0x00,0x00],
       "Z":[0x00,0x00,0x00,0x7E,0x21,0x20,0x10,0x10,0x08,0x04,0x04,0x42,0x42,0x3F,0x00,0x00],
       "a":[0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x22,0x30,0x2C,0x22,0x32,0x6C,0x00,0x00],
       "b":[0x00,0x00,0x00,0x00,0x03,0x02,0x02,0x1A,0x26,0x42,0x42,0x42,0x26,0x1A,0x00,0x00],
       "c":[0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x44,0x02,0x02,0x02,0x44,0x38,0x00,0x00],
       "d":[0x00,0x00,0x00,0x00,0x60,0x40,0x40,0x7C,0x42,0x42,0x42,0x42,0x62,0xDC,0x00,0x00],
       "e":[0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x42,0x42,0x7E,0x02,0x42,0x3C,0x00,0x00],
       "f":[0x00,0x00,0x00,0x00,0x30,0x48,0x08,0x3E,0x08,0x08,0x08,0x08,0x08,0x3E,0x00,0x00],
       "g":[0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7C,0x22,0x22,0x1C,0x02,0x3C,0x42,0x42,0x3C],
       "h":[0x00,0x00,0x00,0x00,0x03,0x02,0x02,0x3A,0x46,0x42,0x42,0x42,0x42,0xE7,0x00,0x00],
       "i":[0x00,0x00,0x00,0x0C,0x0C,0x00,0x00,0x0E,0x08,0x08,0x08,0x08,0x08,0x3E,0x00,0x00],
       "j":[0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x38,0x20,0x20,0x20,0x20,0x20,0x20,0x22,0x1E],
       "k":[0x00,0x00,0x00,0x00,0x03,0x02,0x02,0x72,0x12,0x0A,0x0E,0x12,0x22,0x77,0x00,0x00],
       "l":[0x00,0x00,0x00,0x08,0x0E,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x3E,0x00,0x00],
       "m":[0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x92,0x92,0x92,0x92,0x92,0xB7,0x00,0x00],
       "n":[0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3B,0x46,0x42,0x42,0x42,0x42,0xE7,0x00,0x00],
       "o":[0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x42,0x42,0x42,0x42,0x42,0x3C,0x00,0x00],
       "p":[0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1B,0x26,0x42,0x42,0x42,0x26,0x1A,0x02,0x07],
       "q":[0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x58,0x64,0x42,0x42,0x42,0x64,0x58,0x40,0xE0],
       "r":[0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x77,0x4C,0x04,0x04,0x04,0x04,0x1F,0x00,0x00],
       "s":[0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7C,0x42,0x02,0x3C,0x40,0x42,0x3E,0x00,0x00],
       "t":[0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x3E,0x08,0x08,0x08,0x08,0x48,0x30,0x00,0x00],
       "u":[0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x63,0x42,0x42,0x42,0x42,0x62,0xDC,0x00,0x00],
       "v":[0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x77,0x22,0x22,0x14,0x14,0x08,0x08,0x00,0x00],
       "w":[0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xDB,0x91,0x52,0x5A,0x2A,0x24,0x24,0x00,0x00],
       "x":[0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x6E,0x24,0x18,0x18,0x18,0x24,0x76,0x00,0x00],
       "y":[0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE7,0x42,0x24,0x24,0x18,0x18,0x08,0x08,0x06],
       "z":[0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x22,0x10,0x08,0x08,0x44,0x7E,0x00,0x00],
       " ":[0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],
       ".":[0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x06,0x00,0x00],
       "-":[0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00]
    }

cs  = Pin(("B3",  3))    #引脚定义 IPS CS引脚接B3
rst = Pin(("B12", 12))   #引脚定义 IPS RES引脚接B12
dc  = Pin(("B13", 13))   #引脚定义 IPS DC引脚接B13
bl  = Pin(("B16", 16))   #引脚定义 IPS BL引脚接B16
spi = SPI(30)  #创建对象 SPI3总线上的第0个设备

# 定义显示方向
#0 竖屏模式
#1 竖屏模式  旋转180
#2 横屏模式
#3 横屏模式  旋转180
#  修改参数后请复位OpenART模块
IPS_DISPLAY_DIR = 3;

# 初始化屏幕像素
X_MAX_PIXEL = 0
Y_MAX_PIXEL = 0
if (0==IPS_DISPLAY_DIR):
    X_MAX_PIXEL = 135               # 定义屏幕宽度
    Y_MAX_PIXEL = 240               # 定义屏幕高度
elif (1==IPS_DISPLAY_DIR):
    X_MAX_PIXEL = 135               # 定义屏幕宽度
    Y_MAX_PIXEL = 240               # 定义屏幕高度
elif (2==IPS_DISPLAY_DIR):
    X_MAX_PIXEL = 240               # 定义屏幕宽度
    Y_MAX_PIXEL = 135               # 定义屏幕高度
elif (3==IPS_DISPLAY_DIR):
    X_MAX_PIXEL = 240               # 定义屏幕宽度
    Y_MAX_PIXEL = 135               # 定义屏幕高度
    
# 常用颜色表
RED     = 0XF800
GREEN   = 0X07E0
BLUE    = 0X001F
BLACK   = 0X0000
YELLOW  = 0XFFE0
WHITE   = 0XFFFF
CYAN    = 0X07FF
BRIGHT_RED = 0XF810
GRAY1   = 0X8410
GRAY2   = 0X4208

# 定义笔刷
IPS_PENCOLOR = RED
# 定义背景
IPS_BGCOLOR = WHITE

# ips初始化
def ips_init():
    dc.init(Pin.OUT_PP, Pin.PULL_NONE)  #引脚初始化，方向：输出 无上拉
    rst.init(Pin.OUT_PP, Pin.PULL_NONE) #引脚初始化，方向：输出 无上拉
    cs.init(Pin.OUT_PP, Pin.PULL_NONE)  #引脚初始化，方向：输出 无上拉
    bl.init(Pin.OUT_PP, Pin.PULL_NONE)  #引脚初始化，方向：输出 无上拉 背光控制

    spi.init(30000000,0,0,8,SPI.MSB)#初始化 波特率30000000，极性0，相位0，传输数据长度8位，从高位开始传输数据

    bl.value(1)
    rst.value(0)
    time.sleep(100)
    rst.value(1)
    time.sleep(100)
    write_command(0x11)
    time.sleep(100)

    if (0==IPS_DISPLAY_DIR):
        write_command(0x36, 0x00)
    elif (1==IPS_DISPLAY_DIR):
        write_command(0x36, 0xC0)
    elif (2==IPS_DISPLAY_DIR):
        write_command(0x36, 0x70)
    elif (3==IPS_DISPLAY_DIR):
        write_command(0x36, 0xA0)

    write_command(0x3A, 0x05)
    write_command(0xB2, 0x0C, 0x0C, 0x00, 0x33, 0x33)
    write_command(0xB7, 0x35)
    write_command(0xBB, 0x37)
    write_command(0xC0, 0x2C)
    write_command(0xC2, 0x01)
    write_command(0xC3, 0x12)
    write_command(0xC6, 0x0F)
    write_command(0xD0, 0xA4, 0xA1)
    write_command(0xE0, 0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23)
    write_command(0XE1, 0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23)
    write_command(0x21)
    write_command(0x11)
    time.sleep(100)
    write_command(0x29)
    ips_clear(IPS_BGCOLOR)

# 写命令
def write_command_byte(c):
    c = c.to_bytes(1,'little')
    cs.value(0)
    dc.value(0)
    spi.write(c)
    cs.value(1)

# 写8位数据
def write_data_byte(c):
    c = c.to_bytes(1,'little')
    cs.value(0)
    dc.value(1)
    spi.write(c)
    cs.value(1)

# 写16位数据
def write_data_16bit(dat):
    write_data_byte(dat >> 8)
    write_data_byte(dat&0xFF)

# 写命令
def write_command(c, *data):
    write_command_byte(c)
    if data:
        for d in data:
            if d > 255:
                write_data_byte(d >> 8)
                write_data_byte(d&0xFF)
            else:
                write_data_byte(d)

# 框选坐标
def ips_set_region(x_start, y_start, x_end, y_end):
    if 0==IPS_DISPLAY_DIR:
        write_command(0x2A)
        write_data_16bit(x_start+52)
        write_data_16bit(x_end+52)
        write_command(0x2B)
        write_data_16bit(y_start+40)
        write_data_16bit(y_end+40)
    elif 1==IPS_DISPLAY_DIR:
        write_command(0x2A)
        write_data_16bit(x_start+53)
        write_data_16bit(x_end+53)
        write_command(0x2B)
        write_data_16bit(y_start+40)
        write_data_16bit(y_end+40)
    elif 2==IPS_DISPLAY_DIR:
        write_command(0x2A)
        write_data_16bit(x_start+40)
        write_data_16bit(x_end+40)
        write_command(0x2B)
        write_data_16bit(y_start+53)
        write_data_16bit(y_end+53)
    elif 3==IPS_DISPLAY_DIR:
        write_command(0x2A)
        write_data_16bit(x_start+40)
        write_data_16bit(x_end+40)
        write_command(0x2B)
        write_data_16bit(y_start+52)
        write_data_16bit(y_end+52)
    write_command(0x2C)

# 设置坐标
def ips_set_xy(xpos, ypos):
    ips_set_region(xpos, ypos, xpos, ypos)

# 在指定位置绘制一个点
def ips_drawpoint(x, y, Color):
    ips_set_xy(x, y)
    write_data_byte(Color >> 8)
    write_data_byte(Color&0XFF)

# 显示字符
def ips_showchar(x,y,s):
    if x > X_MAX_PIXEL-7: x = X_MAX_PIXEL-7
    if y > (int)(Y_MAX_PIXEL/16): y = (int)(Y_MAX_PIXEL/16)
    p=0
    bit8=[0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80]
    for i in asc[s]:
        ips_set_region(x,(y-1)*16+p,x+7,(y-1)*16+p)
        for j in bit8:
            if i&j :
                write_data_16bit(IPS_PENCOLOR)
            else:
                write_data_16bit(IPS_BGCOLOR)
        p+=1

# 显示字符串
def ips_showstr(x,y,strd):
    j = 0
    for i in strd:
        ips_showchar(x+8*j,y,i)
        j+=1

# 显示数字
def ips_shownum(x,y,dat):
    ips_showstr(x,y,str(dat))

# 清屏
def ips_clear(Color):
    ips_set_region(0, 0, X_MAX_PIXEL - 1, Y_MAX_PIXEL - 1)
    for i in range(0, Y_MAX_PIXEL):
        for m in range(0, X_MAX_PIXEL):
            write_data_byte(Color >> 8)
            write_data_byte(Color&0xFF)

# 显示图像
def ips_display(image,sizeX,szeY):
    ips_set_region(0,0,sizeX-1,szeY-1)
    cs.value(0)
    dc.value(1)
    spi.write(image)	#先发第N行的第I个数据的高八位
    cs.value(1)

# 图像上显示字符串
#image 获取的图像截图
#x 显示的x位置
#y 显示的y位置
#s 需要显示的字符
#r,g,b 需要显示字符的颜色

def ips_display_string_in_image(image,x,y,s,r,g,b):
    image.draw_string(x, y, s, color = (r, g, b), scale = 2, mono_space = False,
                char_rotation = 0, char_hmirror = False, char_vflip = False,
                string_rotation = 0, string_hmirror = False, string_vflip = False)